# -*- coding: utf-8 -*-
"""Copia de entrega_de_turno.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qZlmo5ctIruEo0AIxQVBKbknquXaKKz6
"""

# @title
#
from IPython.display import display, HTML

# Crear un título con color personalizado usando HTML y CSS
display(HTML("""
    <style>
        h1 {
            color: #FF6347; /* Color tomate (puedes cambiar el color que desees) */
        }
        h2 {
            color: #4682B4; /* Color azul acero */
        }
    </style>

    <h1>Generar eventos de la entrega de turno</h1>

"""))

# @title Eventos entrega de turno
from google.colab import files
import pandas as pd
import io
import ipywidgets as widgets
from IPython.display import display

# Crear el widget de botón
button = widgets.Button(description="TOLIMA NORTE")
output = widgets.Output()

# Mostrar el botón
# Cambiar el color del botón (fondo naranja y letra negra)
button.style.button_color = 'orange'
button.style.font_color = 'black'

# Mostrar el botón
display(button, output)

# Función para procesar el archivo
def on_button_click(b):
    # Subir archivo CSV
    uploaded = files.upload()
    if len(uploaded) == 0:
        print("Error: No se ha cargado ningún archivo.")
        return

    uploaded_filename = list(uploaded.keys())[0]
    try:
        # Leer el archivo CSV
        df = pd.read_csv(io.BytesIO(uploaded[uploaded_filename]), encoding='utf-16', sep='|')

        # Filtrar datos por 'TOLIMA NORTE'
        filtered_df = df[df['SUBZONA'].isin(['TOLIMA NORTE'])]

        # Generar texto
        lista_textos = filtered_df['INCIDENTE'] + ' DA ' + filtered_df['ELEMENTO'].astype(str) + ' CIRCUITO ' + filtered_df['CIRCUITO'].astype(str) + ' REVISA LA ' + filtered_df['BOL'].astype(str) + '. COMENTARIO: ' + filtered_df['COMENTARIO'].astype(str)

        # Mostrar los resultados en el cuaderno
        with output:
            for texto in lista_textos:
                print(texto)

            # Creating a list of dictionaries from lista_textos
            # Assuming you want a single column named 'Descripción'
            registros = [{'Descripción': texto} for texto in lista_textos]
            # Crear el DataFrame using 'registros' which is now defined
            df_final = pd.DataFrame(registros)
            # Guardar el DataFrame en un archivo Excel
            df_final.to_excel('/content/entrega_de_turno_tolima_norte.xlsx', index=False, engine='openpyxl')
            files.download('/content/entrega_de_turno_tolima_norte.xlsx')
            print("Archivo Excel creado exitosamente")


    except Exception as e:
        print(f"Ocurrió un error al procesar el archivo: {e}")

# Asignar la acción al botón
button.on_click(on_button_click)

# @title Eventos entrega de turno TOLIMA SUR
from google.colab import files
import pandas as pd
import io
import ipywidgets as widgets
from IPython.display import display

# Crear el widget de botón
button = widgets.Button(description="TOLIMA SUR")
output = widgets.Output()

# Mostrar el botón
display(button, output)

# Función para procesar el archivo
def on_button_click(b):
    # Subir archivo CSV
    uploaded = files.upload()
    if len(uploaded) == 0:
        print("Error: No se ha cargado ningún archivo.")
        return

    uploaded_filename = list(uploaded.keys())[0]
    try:
        # Leer el archivo CSV
        df = pd.read_csv(io.BytesIO(uploaded[uploaded_filename]), encoding='utf-16', sep='|')

        # Filtrar datos por 'TOLIMA NORTE'
        filtered_df = df[df['SUBZONA'].isin(['TOLIMA SUR'])]

        # Generar texto
        lista_textos = filtered_df['INCIDENTE'] + ' DA ' + filtered_df['ELEMENTO'].astype(str) + ' CIRCUITO ' + filtered_df['CIRCUITO'].astype(str) + ' REVISA LA ' + filtered_df['BOL'].astype(str) + '. COMENTARIO: ' + filtered_df['COMENTARIO'].astype(str)

        # Mostrar los resultados en el cuaderno
        with output:
            for texto in lista_textos:
                print(texto)

            # Creating a list of dictionaries from lista_textos
            # Assuming you want a single column named 'Descripción'
            registros = [{'Descripción': texto} for texto in lista_textos]
            # Crear el DataFrame using 'registros' which is now defined
            df_final = pd.DataFrame(registros)
            # Guardar el DataFrame en un archivo Excel
            df_final.to_excel('/content/entrega_de_turno_tolima_sur.xlsx', index=False, engine='openpyxl')
            files.download('/content/entrega_de_turno_tolima_sur.xlsx')
            print("Archivo Excel creado exitosamente")

    except Exception as e:
        print(f"Ocurrió un error al procesar el archivo: {e}")

# Asignar la acción al botón
button.on_click(on_button_click)

# @title Eventos entrega de turno VALLE NORTE
from google.colab import files
import pandas as pd
import io
import ipywidgets as widgets
from IPython.display import display

# Crear el widget de botón
button = widgets.Button(description="VALLE NORTE")
output = widgets.Output()

# Mostrar el botón
display(button, output)

# Función para procesar el archivo
def on_button_click(b):
    # Subir archivo CSV
    uploaded = files.upload()
    if len(uploaded) == 0:
        print("Error: No se ha cargado ningún archivo.")
        return

    uploaded_filename = list(uploaded.keys())[0]
    try:
        # Leer el archivo CSV
        df = pd.read_csv(io.BytesIO(uploaded[uploaded_filename]), encoding='utf-16', sep='|')

        # Filtrar datos por 'TOLIMA NORTE'
        filtered_df = df[df['SUBZONA'].isin(['VALLE NORTE'])]

        # Generar texto
        lista_textos = filtered_df['INCIDENTE'] + ' DA ' + filtered_df['ELEMENTO'].astype(str) + ' CIRCUITO ' + filtered_df['CIRCUITO'].astype(str) + ' REVISA LA ' + filtered_df['BOL'].astype(str) + '. COMENTARIO: ' + filtered_df['COMENTARIO'].astype(str)

        # Mostrar los resultados en el cuaderno
        with output:
            for texto in lista_textos:
                print(texto)

            # Creating a list of dictionaries from lista_textos
            # Assuming you want a single column named 'Descripción'
            registros = [{'Descripción': texto} for texto in lista_textos]
            # Crear el DataFrame using 'registros' which is now defined
            df_final = pd.DataFrame(registros)
            # Guardar el DataFrame en un archivo Excel
            df_final.to_excel('/content/entrega_de_turno_valle_norte.xlsx', index=False, engine='openpyxl')
            files.download('/content/entrega_de_turno_valle_norte.xlsx')
            print("Archivo Excel creado exitosamente")

    except Exception as e:
        print(f"Ocurrió un error al procesar el archivo: {e}")


# Asignar la acción al botón
button.on_click(on_button_click)

# @title Eventos entrega de turno VALLE SUR
from google.colab import files
import pandas as pd
import io
import ipywidgets as widgets
from IPython.display import display

# Crear el widget de botón
button = widgets.Button(description="VALLE SUR")
output = widgets.Output()

# Mostrar el botón
display(button, output)

# Función para procesar el archivo
def on_button_click(b):
    # Subir archivo CSV
    uploaded = files.upload()
    if len(uploaded) == 0:
        print("Error: No se ha cargado ningún archivo.")
        return

    uploaded_filename = list(uploaded.keys())[0]
    try:
        # Leer el archivo CSV
        df = pd.read_csv(io.BytesIO(uploaded[uploaded_filename]), encoding='utf-16', sep='|')

        # Filtrar datos por 'VALLE SUR'
        filtered_df = df[df['SUBZONA'].isin(['VALLE SUR'])]

        # Generar texto
        lista_textos = filtered_df['INCIDENTE'] + ' DA ' + filtered_df['ELEMENTO'].astype(str) + ' CIRCUITO ' + filtered_df['CIRCUITO'].astype(str) + ' REVISA LA ' + filtered_df['BOL'].astype(str) + '. COMENTARIO: ' + filtered_df['COMENTARIO'].astype(str)

        # Mostrar los resultados en el cuaderno
        with output:
            for texto in lista_textos:
                print(texto)

            # Creating a list of dictionaries from lista_textos
            # Assuming you want a single column named 'Descripción'
            registros = [{'Descripción': texto} for texto in lista_textos]
            # Crear el DataFrame using 'registros' which is now defined
            df_final = pd.DataFrame(registros)
            # Guardar el DataFrame en un archivo Excel
            df_final.to_excel('/content/entrega_de_turno_valle_sur.xlsx', index=False, engine='openpyxl')
            files.download('/content/entrega_de_turno_valle_sur.xlsx')
            print("Archivo Excel creado exitosamente")

    except Exception as e:
        print(f"Ocurrió un error al procesar el archivo: {e}")

# Asignar la acción al botón
button.on_click(on_button_click)